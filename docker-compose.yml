name: university_containers
services:
  #backend_api
  aspnet_api:
    container_name: aspnet_api
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - 8080:${API_PORT}
    depends_on:
      - postgres
  #webserver
  nginx:
    container_name: university-nginx
    build:
      context: ./docker/proxy
      dockerfile: ./Dockerfile
    ports:
      - 127.0.0.1:80:${PROXY_PORT}
    depends_on:
      - postgres
      - aspnet_api
      - university-front
  #front
  university-front:
    container_name: front-container
    build:
      context: ./docker/front
      dockerfile: ./Dockerfile
    volumes:
      - ./docker/front/university-system-fsd:/var/www
    # depends_on:
    #   - nginx
  # data base
  postgres:
    container_name: postgres
    image: postgres:16-alpine3.19
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ../2. Init Database:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bekzatdamir -d university"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4G
volumes:
  db-data:
networks:
  postgres:
    driver: bridge
